// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not


CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
        Mux16(a= x, b= false, sel= zx, out= outzx);
        Not16(in= outzx, out= noutzx);
        Mux16(a= noutzx, b= outzx, sel= nx, out= noutnx);
        Not16(in= noutnx, out= outnx);

        Mux16(a= y, b= false, sel= zy, out= outzy);
        Not16(in= outzy, out= noutzy);
        Mux16(a= noutzy, b= outzy, sel= ny, out= noutny);
        Not16(in= noutny, out= outny);

        Add16(a = outnx, b = outny, out = outfadd);
        And16(a= outnx, b= outny, out= outfand);
        Mux16(a= outfand, b= outfadd, sel= f, out= outf);
        
        Not16(in= outf, out= noutf);
        Mux16(a= noutf, b= outf, sel= no, out= noutno);
        Not16(in= noutno, out= out, out[15] = ng,
            out[8..15]=zra, out[0..7]=zrb);
        Or8Way(in=zra , out= ora);
        Or8Way(in=zrb , out= orb);
        Or(a= ora, b= orb, out= nzr);
        Not(in= nzr, out= zr);
}
